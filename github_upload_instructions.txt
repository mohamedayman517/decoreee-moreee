# تعليمات رفع المشروع إلى GitHub

عزيزي المستخدم mohamedayman517، إليك الخطوات التفصيلية لرفع مشروع "Decor And More" إلى حسابك على GitHub:

## 1. تثبيت Git
- إذا لم يكن Git مثبتًا على جهازك، قم بتحميله وتثبيته من الموقع الرسمي: https://git-scm.com/downloads
- بعد التثبيت، تأكد من تفعيل خيار إضافة Git إلى متغيرات النظام (PATH)
- يمكنك التحقق من التثبيت بفتح موجه الأوامر وكتابة: `git --version`

## 2. إنشاء مستودع جديد على GitHub
- قم بتسجيل الدخول إلى حسابك على GitHub: https://github.com/login
- انقر على زر "+" في أعلى الصفحة واختر "New repository"
- أدخل اسم المستودع: "DecorAndMore"
- أضف وصفًا اختياريًا للمشروع: "منصة تربط بين العملاء ومصممي الديكور المحترفين"
- اختر ما إذا كنت تريد أن يكون المستودع عامًا (Public) أو خاصًا (Private)
- لا تقم بتحديد خيار "Initialize this repository with a README"
- انقر على زر "Create repository"

## 3. تهيئة Git في المشروع المحلي
- افتح موجه الأوامر (Command Prompt) أو PowerShell
- انتقل إلى مجلد المشروع:
  ```
  cd "d:\17-6-2025\Decor And More"
  ```
- قم بتهيئة مستودع Git:
  ```
  git init
  ```
- قم بإعداد معلومات المستخدم (استبدل البريد الإلكتروني بالخاص بك):
  ```
  git config user.name "mohamedayman517"
  git config user.email "your-email@example.com"
  ```

## 4. ملف .gitignore
- لقد قمنا بالفعل بإنشاء وتحديث ملف .gitignore مناسب لمشروعك لتجنب رفع الملفات غير الضرورية
- يتضمن الملف تجاهل المجلدات والملفات التالية:
  - node_modules/
  - ملفات البيئة (.env)
  - ملفات السجلات (logs)
  - ملفات النظام (.DS_Store, Thumbs.db)
  - مجلدات محرر الأكواد (.vscode/, .idea/)
  - وغيرها من الملفات المؤقتة والتي لا يجب مشاركتها

## 5. إضافة الملفات وعمل Commit
- أضف جميع الملفات إلى منطقة التحضير:
  ```
  git add .
  ```
- قم بعمل commit للتغييرات:
  ```
  git commit -m "Initial commit: Decor And More project"
  ```

## 6. ربط المستودع المحلي بالمستودع على GitHub
- قم بربط المستودع المحلي بالمستودع البعيد على GitHub:
  ```
  git remote add origin https://github.com/mohamedayman517/DecorAndMore.git
  ```

## 7. رفع المشروع إلى GitHub
- قم برفع المشروع إلى GitHub:
  ```
  git push -u origin master
  ```
  (أو استخدم `git push -u origin main` إذا كان الفرع الرئيسي هو "main")

## 8. التحقق من الرفع
- قم بزيارة صفحة المستودع على GitHub للتأكد من رفع المشروع بنجاح:
  https://github.com/mohamedayman517/DecorAndMore

## ملاحظات هامة
- تأكد من عدم رفع الملفات الحساسة مثل ملفات الإعدادات التي تحتوي على كلمات مرور أو مفاتيح API
- إذا كان حجم المشروع كبيرًا، قد يستغرق الرفع بعض الوقت
- إذا واجهت أي مشاكل في الاتصال، تأكد من اتصالك بالإنترنت وأن لديك الصلاحيات المناسبة للوصول إلى المستودع

# تعليمات تخزين الصور كـ Base64 في MongoDB

## مقدمة
لحل مشكلة ظهور الصور لجميع أعضاء الفريق، سنقوم بتخزين الصور مباشرة في قاعدة البيانات MongoDB كنص Base64 بدلاً من تخزينها كملفات في نظام الملفات المحلي. هذا سيضمن أن الصور متاحة لجميع أعضاء الفريق بغض النظر عن الجهاز الذي يعملون عليه.

## المميزات
- الصور تُحفظ داخل MongoDB Atlas مباشرة
- الصور تظهر لكل أعضاء الفريق حتى لو كانوا يعملون على أجهزة مختلفة
- لا حاجة لتغييرات كبيرة في الكود أو استخدام GridFS أو خدمات خارجية
- يمكن عرض الصور مباشرة في HTML باستخدام صيغة `data:image/...`

## الخطوات التنفيذية

### 1. تعديل كود تحميل الصور
يجب تعديل جميع مسارات التطبيق التي تتعامل مع تحميل الصور لتحويلها إلى صيغة Base64 وتخزينها في قاعدة البيانات. لاحظنا أن هذا النهج مطبق بالفعل في ملف `projectRoutes.js`، ويمكن تطبيقه على باقي المسارات بنفس الطريقة.

#### مثال على كود تحويل الصورة إلى Base64:
```javascript
// استيراد المكتبات اللازمة
const fs = require("fs");
const multer = require("multer");

// إعداد التخزين المؤقت للملفات
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, "./uploads/"); // مكان مؤقت للتخزين
  },
  filename: (req, file, cb) => {
    cb(null, Date.now() + "-" + file.originalname);
  },
});

const upload = multer({ storage });

// مسار API لتحميل الصورة
router.post("/upload", upload.single("image"), async (req, res) => {
  try {
    // قراءة الملف من التخزين المؤقت
    const imageBuffer = fs.readFileSync(req.file.path);
    // تحويل الصورة إلى صيغة Base64
    const base64Image = imageBuffer.toString("base64");
    // إنشاء سلسلة Data URL كاملة
    const imageData = `data:${req.file.mimetype};base64,${base64Image}`;
    
    // حفظ الصورة في قاعدة البيانات
    const newDocument = new YourModel({
      // ... حقول أخرى
      image: imageData,
    });
    
    await newDocument.save();
    
    // حذف الملف المؤقت بعد الانتهاء (اختياري)
    fs.unlinkSync(req.file.path);
    
    res.json({ success: true, message: "تم تحميل الصورة بنجاح" });
  } catch (error) {
    console.error("خطأ في تحميل الصورة:", error);
    res.status(500).json({ success: false, message: "خطأ في الخادم" });
  }
});
```

### 2. تعديل نماذج البيانات (Schemas)
تأكد من أن جميع نماذج البيانات التي تحتاج إلى تخزين صور تحتوي على حقل من نوع String لتخزين الصور بصيغة Base64:

```javascript
const mongoose = require("mongoose");

const yourSchema = new mongoose.Schema({
  // ... حقول أخرى
  image: { type: String, required: true }, // لتخزين الصورة كـ Base64
});

const YourModel = mongoose.model("YourModel", yourSchema);

module.exports = YourModel;
```

### 3. عرض الصور في واجهة المستخدم
لعرض الصور المخزنة كـ Base64 في واجهة المستخدم، يمكنك استخدام قيمة الحقل مباشرة في خاصية `src` لعنصر `<img>`:

```html
<img src="<%= document.image %>" alt="صورة" />
```

### 4. اعتبارات مهمة

#### حجم البيانات
- تخزين الصور كـ Base64 يزيد من حجم البيانات بنسبة ~33% مقارنة بالملفات الثنائية
- تجنب تخزين صور كبيرة جدًا (يفضل ألا تتجاوز 1-2 ميجابايت للصورة الواحدة)
- قم بضغط الصور أو تقليل أبعادها قبل التحويل إلى Base64 إذا أمكن

#### أداء قاعدة البيانات
- تخزين كميات كبيرة من الصور كـ Base64 قد يؤثر على أداء قاعدة البيانات
- إذا كان لديك عدد كبير من الصور، فكر في استخدام GridFS أو خدمات تخزين سحابية

#### حدود MongoDB
- حجم الوثيقة الواحدة في MongoDB محدود بـ 16 ميجابايت
- إذا كنت تخزن صورًا متعددة في وثيقة واحدة، تأكد من أن الحجم الإجمالي لا يتجاوز هذا الحد

## خاتمة
باتباع هذه التعليمات، ستتمكن من تخزين الصور مباشرة في قاعدة بيانات MongoDB Atlas كـ Base64، مما يضمن ظهورها لجميع أعضاء الفريق بغض النظر عن الجهاز الذي يعملون عليه. هذا الحل مناسب للمشاريع الصغيرة والمتوسطة التي لا تحتاج إلى تخزين كميات كبيرة من الصور.
